// <auto-generated />
using System;
using AIFitnessProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIFitnessProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250207150155_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Aim")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ApplicationUser Aim");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("nvarchar(2100)")
                        .HasComment("ApplicationUser ExperienceLevel");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1900)
                        .HasColumnType("nvarchar(1900)")
                        .HasComment("ApplicationUser FirstName");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasComment("ApplicationUser Height");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1900)
                        .HasColumnType("nvarchar(1900)")
                        .HasComment("ApplicationUser LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Profile Picture stored as byte array");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("ApplicationUser Weight");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("ApplicationUser Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("DietitianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("time");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("DietitianId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.DailyDietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Daily Diet Plan Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasComment("Daily Diet Plan Creator Identifier");

                    b.Property<string>("DayOfWeel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Daily Diet Plan Day Of Week");

                    b.Property<int>("DietId")
                        .HasColumnType("int")
                        .HasComment("Daily Diet Plan Diet Identifier");

                    b.Property<string>("DificultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Daily Diet Plan Dificulty Level");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Daily Diet Plan Image Url");

                    b.Property<string>("MealTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Daily Diet Plan MealTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Daily Diet Plan Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DietId");

                    b.ToTable("DailyDietPlans", t =>
                        {
                            t.HasComment("DailyDietPlan Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Diet Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasComment("Diet Creator Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Diet Name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Diet Image Url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Diet Name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Diet User Id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Diets", t =>
                        {
                            t.HasComment("Diet Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dietitian Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(4500)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Dietitian Bio");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasComment("Dietitian Experience");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Dietitian Phone Number");

                    b.Property<string>("SertificateImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Dietitian Sertification Image");

                    b.Property<string>("SertificationDetails")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Dietitian SertificationDetails");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Dietitian Specialization");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Dietitian User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Dietitians", t =>
                        {
                            t.HasComment("Dietitian Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Document Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(4500)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Document User Bio");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int")
                        .HasComment("Documents User Experience In Years");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit")
                        .HasComment("Document Is Accept");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Document User Position");

                    b.Property<string>("SertificateImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Document User Sertification Image");

                    b.Property<string>("SertificationDetails")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Document User Sertification Details");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Document User Specialization");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Document User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Documents", t =>
                        {
                            t.HasComment("Document Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Exercise Description");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exercise DifficultyLevel");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Exercise ImageUrl");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Exercise MuscleGroup");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Exercise Name");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Exercise VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Meal Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Meal Calories");

                    b.Property<string>("DificultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Meal Dificulty Level");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Meal ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Meal Name");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Meal Recipe");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Meal VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("Meals", t =>
                        {
                            t.HasComment("Meal Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.MealsDailyDietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Meals Dily Diet Plan Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyDietPlansId")
                        .HasColumnType("int")
                        .HasComment("Dily Diet Plan Identifier");

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasComment("Meal Identifier");

                    b.HasKey("Id");

                    b.HasIndex("DailyDietPlansId");

                    b.HasIndex("MealId");

                    b.ToTable("MealsDailyDietPlans", t =>
                        {
                            t.HasComment("Meals Dily Diet Plan Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Notification Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date And Time Of Notification");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Notification Message");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int")
                        .HasComment("Notification Trainer Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Notification User Id");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Notification Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)")
                        .HasComment("User Opinion Content");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Opinion Sender Id");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.PlanAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Diet Id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End Date And Time Of Plan Assignment");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start Date And Time Of Plan Assignment");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Training Plan Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Plan Assignment User Id");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("TrainingPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanAssignments", t =>
                        {
                            t.HasComment("Plan Assignment Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.RequestToDietitian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Request To Dietitian Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DietBackground")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Diet Background");

                    b.Property<int>("DietitianId")
                        .HasColumnType("int")
                        .HasComment("Dietitian Identifier");

                    b.Property<string>("DislikedFoods")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Disliked Foods");

                    b.Property<string>("FavouriteFoods")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Favourite Food");

                    b.Property<string>("FoodAllergies")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Foods Allergies");

                    b.Property<string>("HealthIssues")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Health Issues");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit")
                        .HasComment("Has the request been answered?");

                    b.Property<string>("MealPreparationPreference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Meal Preparation Preference");

                    b.Property<string>("PreferredMealsPerDay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Preffered Meals Per Day");

                    b.Property<string>("SupplementsUsed")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Used Supplements");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User Target");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.Property<string>("UserPictures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User Pictures");

                    b.HasKey("Id");

                    b.HasIndex("DietitianId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestToDietitians", t =>
                        {
                            t.HasComment("Request To Dietitian Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.RequestsToCoach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<string>("PicturesOfPersons")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingCommitment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingPreferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestsToCoaches");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Trainer Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(4500)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Bio");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasComment("Trainer Experience");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Phone Number");

                    b.Property<string>("SertificateImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Sertification Image");

                    b.Property<string>("SertificationDetails")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Trainer Sertification Details");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Trainer Specialization");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Trainers", t =>
                        {
                            t.HasComment("Trainer Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Training Plan Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasComment("Training Plan Creator Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Training Plan Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Training Plan Name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Training Plan  User Id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingPlan", t =>
                        {
                            t.HasComment("Training Plan Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("User Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasComment("User Comment Content");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("User Comment Rating");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Comment Receiver Id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Comment Sender Id");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserComments", t =>
                        {
                            t.HasComment("User Comment Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Workout Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Workout Day Of Week");

                    b.Property<string>("DificultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Workout Image");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderInWorkout")
                        .HasColumnType("int")
                        .HasComment("Workout Order In Workout");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Workout Title");

                    b.Property<int?>("TrainingPlanId")
                        .HasColumnType("int")
                        .HasComment("Workout Training Plan Id");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("Workouts", t =>
                        {
                            t.HasComment("Workout Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.WorkoutsExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExcersiceId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExcersiceId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutsExercises");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Calendar", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "Dietitian")
                        .WithMany("Calendars")
                        .HasForeignKey("DietitianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("Calendars")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Dietitian");

                    b.Navigation("Trainer");

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.DailyDietPlan", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "Dietitian")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Diet", "Diet")
                        .WithMany("DailyDietPlans")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Dietitian");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "Dietitian")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietitian");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Dietitian")
                        .HasForeignKey("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Document", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.MealsDailyDietPlan", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.DailyDietPlan", "DailyDietPlans")
                        .WithMany("MealsDailyDietPlans")
                        .HasForeignKey("DailyDietPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Meal", "Meal")
                        .WithMany("MealsDailyDietPlans")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyDietPlans");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Notification", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("Notifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Opinion", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "Sender")
                        .WithMany("SentOpinion")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.PlanAssignment", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Diet", "Diet")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "TrainingPlan")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("TrainingPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.RequestToDietitian", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "Dietitian")
                        .WithMany("RequestToDietitians")
                        .HasForeignKey("DietitianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("RequestsToDietitian")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietitian");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.RequestsToCoach", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Trainer")
                        .HasForeignKey("AIFitnessProject.Infrastructure.Data.Models.Trainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany("ReceivedComments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "Sender")
                        .WithMany("SentComments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Workout", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("Workouts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "TrainingPlans")
                        .WithMany("Workouts")
                        .HasForeignKey("TrainingPlanId");

                    b.Navigation("Trainer");

                    b.Navigation("TrainingPlans");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.WorkoutsExercise", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Exercise", "Exercise")
                        .WithMany("WorkoutsExercises")
                        .HasForeignKey("ExcersiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutsExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Dietitian")
                        .IsRequired();

                    b.Navigation("Documents");

                    b.Navigation("Notifications");

                    b.Navigation("PlanAssignments");

                    b.Navigation("ReceivedComments");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("RequestsToDietitian");

                    b.Navigation("SentComments");

                    b.Navigation("SentOpinion");

                    b.Navigation("Trainer")
                        .IsRequired();
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.DailyDietPlan", b =>
                {
                    b.Navigation("MealsDailyDietPlans");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.Navigation("DailyDietPlans");

                    b.Navigation("PlanAssignments");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("RequestToDietitians");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutsExercises");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Meal", b =>
                {
                    b.Navigation("MealsDailyDietPlans");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.Navigation("PlanAssignments");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Navigation("WorkoutsExercises");
                });
#pragma warning restore 612, 618
        }
    }
}

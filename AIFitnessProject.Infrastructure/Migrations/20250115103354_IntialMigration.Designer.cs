// <auto-generated />
using System;
using AIFitnessProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIFitnessProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250115103354_IntialMigration")]
    partial class IntialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ApplicationUser ExperienceLevel");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ApplicationUser FirstName");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ApplicationUser LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("ApplicationUser Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = "0a2830ef-8be3-4ef6-910b-33b680d659d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c37f9e70-f9ff-4e55-8c95-83ce9708cef7",
                            Email = "stanislav@abv.bg",
                            EmailConfirmed = false,
                            ExperienceLevel = "Начинаещ,почти не съм влизал в зала да спортувам.Изглеждам ужасно и искам да отслабна!",
                            FirstName = "Stanislav",
                            Height = 1.95,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@ABV.BG",
                            NormalizedUserName = "STANISLAV@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMozVsviW+CCc2Tz+fr9N7khWE+hDIgalwfpSJNPWS7MjxQREG5/ttgIHeRq9N+TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e406138-c088-4d10-810a-8cb287aa339b",
                            TwoFactorEnabled = false,
                            UserName = "stanislav@abv.bg",
                            Weight = 131.5
                        },
                        new
                        {
                            Id = "0e136956-3e82-4e00-8f60-b274cdf40833",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e105f213-ede3-4a80-842f-3c9dc11968f3",
                            Email = "daniela@abv.bg",
                            EmailConfirmed = false,
                            ExperienceLevel = "Активно спортуващ,занимавала съм се с фитнес от 3 години,но сега главно наблягам върху тренировките за издръжливост",
                            FirstName = "Даниела",
                            Height = 1.7,
                            LastName = "Манева",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA@ABV.BG",
                            NormalizedUserName = "DANIELA_5",
                            PasswordHash = "AQAAAAIAAYagAAAAEKAunNIJCw49N48zrGwwwatAKCVt/9+ukGtKQSpiB1GpcG+hGjSy81X9NqtRma2vYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddfff353-d2cc-4d0c-a9cd-c40f2914296b",
                            TwoFactorEnabled = false,
                            UserName = "daniela_5",
                            Weight = 55.0
                        },
                        new
                        {
                            Id = "cd87d0e2-4047-473e-924a-3e10406c5583",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddd19b43-78e7-4f76-ada7-a863c26dda43",
                            Email = "pesho@abv.bg",
                            EmailConfirmed = false,
                            ExperienceLevel = "Имам някакъв малък опит с фитнес залите целта ми е да стана 100 кила,но килограмите,които кача да бъдат мускулна маса",
                            FirstName = "Pesho",
                            Height = 2.0299999999999998,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@ABV.BG",
                            NormalizedUserName = "PESHO@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+v13AndHYx22Tkv0N4i7EST5hzENr8poObunJAvbe68+BIT85fWDXFB6NeW3+usA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eccde9ba-4a3c-4bc1-9bee-3a8988b80b6f",
                            TwoFactorEnabled = false,
                            UserName = "pesho@abv.bg",
                            Weight = 92.0
                        },
                        new
                        {
                            Id = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec2261ab-a653-4698-bbf8-03187c3e1877",
                            Email = "svetoslav@abv.bg",
                            EmailConfirmed = false,
                            ExperienceLevel = "Активно спортуващ,занимавал съм се с фитнес от 10 години,целта ми е да направя всички трениращи в това приложение да харесват своята визия",
                            FirstName = "Светослав",
                            Height = 2.0299999999999998,
                            LastName = "Ковачев",
                            LockoutEnabled = false,
                            NormalizedEmail = "SVETOSLAV@ABV.BG",
                            NormalizedUserName = "SVETOSLAV102",
                            PasswordHash = "AQAAAAIAAYagAAAAEGpGWdQycQ1YyrtSM7TavrwHEVtbEjsMGIfjtfboG/n6wz+1kgizV4bQFEuHFV/4Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d258ec24-1129-4a44-84b4-4597aecc18e9",
                            TwoFactorEnabled = false,
                            UserName = "svetoslav102",
                            Weight = 82.0
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("DietitianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("time");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("DietitianId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Diet Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasComment("Diet Creator Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Diet Name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Diet Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Diets", t =>
                        {
                            t.HasComment("Diet Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.DietDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("DietDetail Table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfWeel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DietDetail MealTime");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("MealTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DietDetail MealTime");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("MealId");

                    b.ToTable("DietDetails", t =>
                        {
                            t.HasComment("DietDetail Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dietitian Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Dietitian ImageUrl");

                    b.Property<string>("SertificationDetails")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Dietitian SertificationDetails");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Dietitian Specialization");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Dietitians", t =>
                        {
                            t.HasComment("Dietitian Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Exercise Description");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exercise DifficultyLevel");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Exercise ImageUrl");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Exercise MuscleGroup");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Exercise Name");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Exercise VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Meal Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Meal Calories");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Meal ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Meal Name");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Meal Recipe");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Meal VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("Meals", t =>
                        {
                            t.HasComment("Meal Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Notification Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date And Time Of Notification");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Notification Message");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int")
                        .HasComment("Notification Trainer Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Notification User Id");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Notification Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.PlanAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Diet Id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End Date And Time Of Plan Assignment");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start Date And Time Of Plan Assignment");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("int")
                        .HasComment("Plan Assignment Training Plan Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Plan Assignment User Id");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("TrainingPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanAssignments", t =>
                        {
                            t.HasComment("Plan Assignment Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Trainer Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(4500)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Bio");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasComment("Trainer Experience");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Trainer ImageUrl");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Phone Number");

                    b.Property<string>("SertificationDetails")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Trainer Sertification Details");

                    b.Property<string>("SertificationImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer Sertification Image");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Trainer Specialization");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer User Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Trainers", t =>
                        {
                            t.HasComment("Trainer Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Даниела Манева е фитнес треньор, който активно се занимава със спорт и фитнес от 3 години. Нейната специализация е в тренировките за издръжливост и функционален фитнес. Със силно желание да помогне на своите клиенти да постигнат максимална физическа издръжливост и да повишат спортната си подготовка, тя съчетава индивидуален подход с доказани методи за тренировки.\r\nДаниела вярва, че с упоритост и правилни тренировки, всеки може да постигне отлични резултати в здравето и физическата форма.",
                            Experience = 5,
                            ImageUrl = "https://pulsefit.bg/uploads/cache/N/public/uploads/media-manager/app-modules-trainers-models-trainer/305/6874/novo.png",
                            PhoneNumber = "0895124157",
                            SertificationDetails = "Здравейте, аз съм сертифициран специалист по издръжливост и функционален фитнес. Специализирам в създаването на тренировъчни програми, които ще повишат вашата издръжливост и функционална сила.",
                            SertificationImage = "https://dani-sport.eu/wp-content/uploads/2021/06/UDOSTOVERENIE_TRENER_R-688x500.jpg",
                            Specialization = "Издръжливост и функционален фитнес",
                            UserId = "0e136956-3e82-4e00-8f60-b274cdf40833"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Светослав Ковачев е фитнес треньор, който е преминал през истинска трансформация. В началото на своето фитнес пътуване той не е имал перфектно тяло, а напротив – борел се е с наднормено тегло и липса на мотивация. Със силна воля и постоянство, той успява да постигне значителни резултати и сега е не само преобразен физически, но и психически.\r\n\r\nДнес Светослав е сертифициран треньор с опит и страст за това, което прави. Неговата цел е да помага на хората да постигнат не само физическите си цели, но и да изградят здравословни навици, които да продължат през целия живот. Той вярва, че промяната е възможна за всеки, стига да има правилния подход и подкрепа.\r\n\r\n\r\n\r\n\r\n",
                            Experience = 4,
                            ImageUrl = "https://pulsefit.bg/uploads/cache/N/public/uploads/media-manager/app-modules-trainers-models-trainer/305/6874/novo.png",
                            PhoneNumber = "0895124157",
                            SertificationDetails = "Здравейте, аз съм сертифициран специалист по сила и кондиция (CSCS). Специализирам в създаването на тренировъчни програми, които помагат за изграждане на сила и мускулна маса. Заедно ще постигнем вашите фитнес цели!",
                            SertificationImage = "https://fitnesstime.eu/wp-content/uploads/2018/11/fitness-licenz-nsa-min.png",
                            Specialization = "Изграждане на мускулна маса",
                            UserId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8"
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Training Plan Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasComment("Training Plan Creator Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("Training Plan Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Training Plan Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("TrainingPlan", t =>
                        {
                            t.HasComment("Training Plan Table");
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("User Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasComment("User Comment Content");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("User Comment Rating");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Comment Receiver Id");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Comment Sender Id");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserComments", t =>
                        {
                            t.HasComment("User Comment Table");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Светослав е прекрасен треньор,който благодарение на него хората постигат своето мечтано тяло.Препоръчвам задължително!",
                            Rating = 5,
                            ReceiverId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            SenderId = "0a2830ef-8be3-4ef6-910b-33b680d659d3"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Невероятен треньор.Изключително прецизен в работата си,с изключително добро държание,с него можете да постигенте всичко",
                            Rating = 5,
                            ReceiverId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            SenderId = "cd87d0e2-4047-473e-924a-3e10406c5583"
                        });
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Workout Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Workout Day Of Week");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasComment("Workout Exercise Id");

                    b.Property<int>("OrderInWorkout")
                        .HasColumnType("int")
                        .HasComment("Workout Order In Workout");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("int")
                        .HasComment("Workout Training Plan Id");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("Workouts", t =>
                        {
                            t.HasComment("Workout Table");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Calendar", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "Dietitian")
                        .WithMany("Calendars")
                        .HasForeignKey("DietitianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("Calendars")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Dietitian");

                    b.Navigation("Trainer");

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.DietDetail", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Diet", "Diet")
                        .WithMany("DietDetails")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Meal", "Meal")
                        .WithMany("DietDetails")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Dietitian")
                        .HasForeignKey("AIFitnessProject.Infrastructure.Data.Models.Dietitian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Notification", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "Trainer")
                        .WithMany("Notifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.PlanAssignment", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Diet", "Diet")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "TrainingPlan")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("TrainingPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Trainer")
                        .HasForeignKey("AIFitnessProject.Infrastructure.Data.Models.Trainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Trainer", "User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany("ReceivedComments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", "Sender")
                        .WithMany("SentComments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Workout", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.Exercise", "Exercise")
                        .WithMany("Workouts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", "TrainingPlans")
                        .WithMany("Workouts")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingPlans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Dietitian")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("PlanAssignments");

                    b.Navigation("ReceivedComments");

                    b.Navigation("SentComments");

                    b.Navigation("Trainer")
                        .IsRequired();
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Diet", b =>
                {
                    b.Navigation("DietDetails");

                    b.Navigation("PlanAssignments");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Dietitian", b =>
                {
                    b.Navigation("Calendars");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Meal", b =>
                {
                    b.Navigation("DietDetails");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.Trainer", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AIFitnessProject.Infrastructure.Data.Models.TrainingPlan", b =>
                {
                    b.Navigation("PlanAssignments");

                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}

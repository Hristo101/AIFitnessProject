@* Keep the existing using and model declarations *@
@using AIFitnessProject.Core.Models.Calendar
@model UserCalendarViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    @* Keep existing head content *@
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Stay organized with our user-friendly Calendar featuring events, reminders, and a customizable interface." />
    <meta name="keywords" content="calendar, events, reminders, javascript, html, css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/Calendar/CalendarUserStyles.css" />
    <title>Enhanced Calendar with Events</title>
</head>
<body>
    <div class="container">
        <div class="left">
            <div class="user-profile">
                <div class="profile-picture">
                    @if (Model.ProfilePictureUrl.StartsWith("http") || Model.ProfilePictureUrl.StartsWith("/img"))
                    {
                        <img src="@Model.ProfilePictureUrl" alt="Profile Picture" class="profile-img" />
                    }
                    else
                    {
                        <img src="data:image/jpeg;base64,@Model.ProfilePictureUrl" alt="Profile Picture" class="profile-img" />
                    }
                </div>
                <div class="user-info">
                    <p class="user-name">@Model.FullName</p>
                    <p class="user-email">@Model.Email</p>
                </div>
                <hr class="user-divider" />
            </div>

            <div class="calendar-container">
                <div class="calendar">
                    <div class="month">
                        <i class="fas fa-angle-left prev"></i>
                        <div class="date">December 2025</div>
                        <i class="fas fa-angle-right next"></i>
                    </div>
                    <div class="weekdays">
                        <div>Sun</div>
                        <div>Mon</div>
                        <div>Tue</div>
                        <div>Wed</div>
                        <div>Thu</div>
                        <div>Fri</div>
                        <div>Sat</div>
                    </div>
                    <div class="days"></div>
                    <div class="goto-today">
                        <div class="goto">
                            <input type="text" placeholder="mm/yyyy" class="date-input" />
                            <button class="goto-btn">Go</button>
                        </div>
                        <button class="today-btn">Today</button>
                    </div>
                </div>
                <div class="workouts-list">
                    <div class="workouts-container">
                        @foreach (var workout in Model.TrainingPlanWorkouts)
                        {
                            <div class="workout-item" data-workout-id="@workout.Id" 
                                 data-workout-name="@workout.Name" 
                                 data-workout-image="@workout.ImageUrl" 
                                 data-workout-exercises="@workout.ExerciseCount" 
                                 data-workout-muscle="@workout.MuscleGroup">
                                <div class="workout-image">
                                    <img src="@workout.ImageUrl" alt="@workout.Name" class="workout-img" />
                                    <div class="workout-overlay">
                                        <i class="fas fa-dumbbell"></i>
                                    </div>
                                </div>
                                <div class="workout-details">
                                    <h3 class="workout-name">@workout.Name</h3>
                                    <p class="workout-exercise-count">@workout.ExerciseCount Exercises</p>
                                    <div class="workout-stats">
                                        <span><i class="fas fa-dumbbell"></i> @workout.MuscleGroup</span>
                                    </div>
                                    <a asp-area="Trainer" 
                                       asp-controller="Workout" 
                                       asp-action="WorkoutDetailsFromCalendar" 
                                       asp-route-id="@workout.Id" 
                                       class="details-btn">Details</a>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="pagination">
                        <button class="prev-page-btn"><i class="fas fa-angle-left"></i> Previous</button>
                        <span class="page-info"></span>
                        <button class="next-page-btn">Next <i class="fas fa-angle-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
        <div class="right">
            <div class="today-date">
                <div class="event-day">Wed</div>
                <div class="event-date">12th December 2022</div>
            </div>
            <div class="events">
                <div class="workouts-section"></div>
                <div class="meals-section"></div>
            </div>
            <div class="add-event-wrapper">
                <div class="add-event-header">
                    <div class="title">Add Event</div>
                    <i class="fas fa-times close"></i>
                </div>
                <div class="add-event-body">
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Name" class="event-name" />
                    </div>
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Time From" class="event-time-from" />
                    </div>
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Time To" class="event-time-to" />
                    </div>
                    <div class="add-event-input workout-input">
                        <button class="attach-workout-btn">
                            <i class="fas fa-dumbbell"></i>
                            <span>Attach Workout</span>
                        </button>
                        <span class="selected-workout-info"></span>
                    </div>
                </div>
                <div class="add-event-footer">
                    <button class="add-event-btn">Add Event</button>
                </div>
            </div>
        </div>
        <button class="add-event">
            <i class="fas fa-plus"></i>
        </button>
    </div>

    <style>
        @* Keep existing styles *@
        :root {
            --primary-clr: #b38add;
            --secondary-clr: #8a54c5;
            --hover-clr: #9c6cd9;
            --shadow-clr: rgba(179, 138, 221, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        ::-webkit-scrollbar {
            width: 5px;
        }

        ::-webkit-scrollbar-track {
            background: #f5f5f5;
            border-radius: 50px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary-clr);
            border-radius: 50px;
        }

        body {
            position: relative;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #e2e1dc;
        }

        .container {
            position: relative;
            width: 1200px;
            min-height: 850px;
            margin: 0 auto;
            padding: 5px;
            color: #fff;
            display: flex;
            border-radius: 10px;
            background-color: #373c4f;
        }

        .user-profile {
            width: 100%;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 0;
        }

        .profile-picture {
            width: 100px;
            height: 100px;
            margin: 0 auto;
            overflow: hidden;
            border-radius: 50%;
            border: 2px solid var(--primary-clr);
            transition: transform 0.3s ease;
        }

        .profile-picture img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .profile-picture:hover {
            transform: scale(1.05);
        }

        .user-info {
            text-align: center;
            margin-top: 10px;
        }

        .user-name {
            font-size: 1.2rem;
            font-weight: 500;
            color: #373c4f;
            margin-top: 10px;
        }

        .user-email {
            font-size: 1rem;
            color: #878895;
            margin-top: 5px;
        }

        .user-divider {
            margin: 20px 0;
            border-top: 1px solid #f5f5f5;
        }

        .left {
            width: 60%;
            padding: 20px;
        }

        .calendar {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            margin-top: 20px;
            color: #878895;
            border-radius: 5px;
            background-color: #fff;
        }

        .calendar::before,
        .calendar::after {
            content: "";
            position: absolute;
            top: 50%;
            left: 100%;
            width: 12px;
            height: 97%;
            border-radius: 0 5px 5px 0;
            background-color: #d3d4d6d7;
            transform: translateY(-50%);
        }

        .calendar::before {
            height: 94%;
            left: calc(100% + 12px);
            background-color: rgb(153, 153, 153);
        }

        .calendar .month {
            width: 100%;
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 50px;
            font-size: 1.2rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .calendar .month .prev,
        .calendar .month .next {
            cursor: pointer;
        }

        .calendar .month .prev:hover,
        .calendar .month .next:hover {
            color: var(--primary-clr);
        }

        .calendar .weekdays {
            width: 100%;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            font-size: 1rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .weekdays div {
            width: 14.28%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .calendar .days {
            width: 100%;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            padding: 0 20px;
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 20px;
        }

        .calendar .days .day {
            width: 14.28%;
            height: 90px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: var(--primary-clr);
            border: 1px solid #f5f5f5;
        }

        .calendar .days .day:nth-child(7n + 1) {
            border-left: 2px solid #f5f5f5;
        }

        .calendar .days .day:nth-child(7n) {
            border-right: 2px solid #f5f5f5;
        }

        .calendar .days .day:nth-child(-n + 7) {
            border-top: 2px solid #f5f5f5;
        }

        .calendar .days .day:nth-child(n + 29) {
            border-bottom: 2px solid #f5f5f5;
        }

        .calendar .days .day:not(.prev-date, .next-date):hover {
            color: #fff;
            background-color: var(--primary-clr);
        }

        .calendar .days .prev-date,
        .calendar .days .next-date {
            color: #b3b3b3;
        }

        .calendar .days .active {
            position: relative;
            font-size: 2rem;
            color: #fff;
            background-color: var(--primary-clr);
        }

        .calendar .days .active::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            box-shadow: 0 0 10px 2px var(--primary-clr);
        }

        .calendar .days .today {
            font-size: 2rem;
        }

        .calendar .days .event {
            position: relative;
        }

        .calendar .days .event::after {
            content: "";
            position: absolute;
            bottom: 10%;
            left: 50%;
            width: 75%;
            height: 2px;
            transform: translateX(-50%);
            background-color: var(--primary-clr);
        }

        .calendar .days .day:hover.event::after {
            background-color: #fff;
        }

        .calendar .days .active.event::after {
            background-color: #fff;
            bottom: 20%;
        }

        .calendar .days .active.event {
            padding-bottom: 10px;
        }

        .calendar .goto-today {
            width: 100%;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 5px;
            padding: 0 20px;
            margin-bottom: 20px;
            color: var(--primary-clr);
        }

        .calendar .goto-today .goto {
            display: flex;
            align-items: center;
            border-radius: 5px;
            overflow: hidden;
            border: 1px solid var(--primary-clr);
        }

        .calendar .goto-today .goto input {
            width: 100%;
            height: 30px;
            outline: none;
            border: none;
            border-radius: 5px;
            padding: 0 20px;
            color: var(--primary-clr);
            border-radius: 5px;
        }

        .calendar .goto-today button {
            padding: 5px 10px;
            border: 1px solid var(--primary-clr);
            border-radius: 5px;
            background-color: transparent;
            cursor: pointer;
            color: var(--primary-clr);
        }

        .calendar .goto-today button:hover {
            color: #fff;
            background-color: var(--primary-clr);
        }

        .calendar .goto-today .goto button {
            border: none;
            border-left: 1px solid var(--primary-clr);
            border-radius: 0;
        }

        .container .right {
            position: relative;
            width: 40%;
            min-height: 100%;
            padding: 20px 0;
        }

        .right .today-date {
            width: 100%;
            height: 50px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            justify-content: space-between;
            padding: 0 40px;
            padding-left: 70px;
            margin-top: 50px;
            margin-bottom: 20px;
            text-transform: capitalize;
        }

        .right .today-date .event-day {
            font-size: 2rem;
            font-weight: 500;
        }

        .right .today-date .event-date {
            font-size: 1rem;
            font-weight: 400;
            color: #878895;
        }

        .events {
            width: 100%;
            height: 100%;
            max-height: 600px;
            overflow-x: hidden;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            padding: 0 20px;
        }

        .workouts-section, .meals-section {
            margin-bottom: 20px;
        }

        .workouts-section h2, .meals-section h2 {
            font-size: 1.2rem;
            font-weight: 600;
            color: #fff;
            margin-bottom: 10px;
            text-transform: uppercase;
            border-bottom: 2px solid var(--primary-clr);
            padding-bottom: 5px;
        }

        @* Keep existing event, event-workout, and event-meal styles *@
        .event {
            position: relative;
            width: 100%;
            margin: 10px 0;
            padding: 15px;
            background: rgba(63, 68, 88, 0.9);
            border-radius: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .event:nth-child(even) {
            background: rgba(63, 68, 88, 0.7);
        }

        .event:hover {
            background: linear-gradient(90deg, var(--primary-clr), rgba(63, 68, 88, 0.9));
            box-shadow: 0 4px 15px var(--shadow-clr);
            transform: translateY(-2px);
        }

        .event .title {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .event .title i {
            color: var(--primary-clr);
            font-size: 0.5rem;
        }

        .event:hover .title i {
            color: #fff;
        }

        .event .title .event-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-left: 15px;
            color: #fff;
        }

        .event .event-time {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
            margin-left: 15px;
            margin-bottom: 10px;
        }

        .event:hover .event-time {
            color: #fff;
        }

        .event-workout {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid var(--primary-clr);
            border-radius: 8px;
            padding: 10px;
            display: flex;
            align-items: center;
            margin: 10px 0;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .event-workout:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px var(--shadow-clr);
            background: rgba(255, 255, 255, 0.25);
        }

        .event-workout img {
            width: 70px;
            height: 70px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 15px;
            border: 2px solid var(--secondary-clr);
            transition: transform 0.3s ease;
        }

        .event-workout:hover img {
            transform: scale(1.05);
        }

        .event-workout .workout-details {
            flex: 1;
        }

        .event-workout .workout-name {
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            margin: 0 0 5px 0;
            text-transform: uppercase;
        }

        .event-workout .workout-info {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .event-workout .workout-info i {
            color: var(--primary-clr);
            font-size: 0.9rem;
        }

        .event-workout:hover .workout-info i {
            color: #fff;
        }

        .event-meal {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid var(--primary-clr);
            border-radius: 8px;
            padding: 10px;
            display: flex;
            align-items: center;
            margin: 10px 0;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .event-meal:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px var(--shadow-clr);
            background: rgba(255, 255, 255, 0.25);
        }

        .event-meal img {
            width: 70px;
            height: 70px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 15px;
            border: 2px solid var(--secondary-clr);
            transition: transform 0.3s ease;
        }

        .event-meal:hover img {
            transform: scale(1.05);
        }

        .event-meal .meal-details {
            flex: 1;
        }

        .event-meal .meal-name {
            font-size: 1rem;
            font-weight: 600;
            color: #fff;
            margin: 0 0 5px 0;
            text-transform: uppercase;
        }

        .event-meal .meal-info {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .event-meal .meal-info i {
            color: var(--primary-clr);
            font-size: 0.9rem;
        }

        .event-meal:hover .meal-info i {
            color: #fff;
        }

        .event .delete-btn {
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.5);
            color: rgba(255, 255, 255, 0.8);
            padding: 8px 20px;
            border-radius: 20px;
            font-size: 0.85rem;
            cursor: pointer;
            margin-top: 10px;
            transition: all 0.3s ease;
            display: block;
            margin-left: auto;
        }

        .event .delete-btn:hover {
            background: var(--primary-clr);
            color: #fff;
            border-color: var(--primary-clr);
            box-shadow: 0 2px 8px var(--shadow-clr);
        }

        .event .delete-btn:active {
            transform: scale(0.95);
        }

        .add-event {
            position: absolute;
            bottom: 30px;
            right: 30px;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            color: #878895;
            border: 2px solid #878895;
            opacity: 0.5;
            border-radius: 50%;
            background-color: transparent;
            cursor: pointer;
        }

        .add-event:hover {
            opacity: 1;
        }

        .add-event i {
            pointer-events: none;
        }

        .events .no-event {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 500;
            color: #878895;
        }

        .add-event-wrapper {
            position: absolute;
            bottom: 100px;
            left: 50%;
            width: 90%;
            max-height: 0;
            overflow: hidden;
            border-radius: 5px;
            background-color: #fff;
            transform: translateX(-50%);
            transition: max-height 0.5s ease;
        }

        .add-event-wrapper.active {
            max-height: 450px;
        }

        .add-event-header {
            width: 100%;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            color: #373c4f;
            border-bottom: 1px solid #f5f5f5;
        }

        .add-event-header .close {
            font-size: 1.5rem;
            cursor: pointer;
        }

        .add-event-header .close:hover {
            color: var(--primary-clr);
        }

        .add-event-header .title {
            font-size: 1.2rem;
            font-weight: 500;
        }

        .add-event-body {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 20px;
        }

        .add-event-body .add-event-input {
            width: 100%;
            height: 40px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .add-event-body .add-event-input input {
            width: 100%;
            height: 100%;
            outline: none;
            border: none;
            border-bottom: 1px solid #f5f5f5;
            padding: 0 10px;
            font-size: 1rem;
            font-weight: 400;
            color: #373c4f;
        }

        .add-event-body .add-event-input input::placeholder {
            color: #a5a5a5;
        }

        .add-event-body .add-event-input input:focus {
            border-bottom: 1px solid var(--primary-clr);
        }

        .add-event-body .add-event-input input:focus::placeholder {
            color: var(--primary-clr);
        }

        .workout-input {
            height: 50px;
            position: relative;
        }

        .attach-workout-btn {
            width: 180px;
            height: 45px;
            background: linear-gradient(135deg, var(--primary-clr), var(--secondary-clr));
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--shadow-clr);
        }

        .attach-workout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px var(--shadow-clr);
            background: linear-gradient(135deg, var(--hover-clr), var(--primary-clr));
        }

        .attach-workout-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px var(--shadow-clr);
        }

        .attach-workout-btn i {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        .attach-workout-btn:hover i {
            transform: rotate(20deg);
        }

        .attach-workout-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s ease, height 0.6s ease;
        }

        .attach-workout-btn:hover::before {
            width: 200%;
            height: 200%;
        }

        .selected-workout-info {
            margin-left: 10px;
            color: #373c4f;
            font-size: 0.9rem;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .add-event-footer {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .add-event-footer .add-event-btn {
            height: 40px;
            font-size: 1rem;
            font-weight: 500;
            outline: none;
            border: none;
            color: #fff;
            background-color: var(--primary-clr);
            border-radius: 5px;
            cursor: pointer;
            padding: 5px 20px;
            border: 1px solid var(--primary-clr);
            transition: all 0.3s ease;
        }

        .add-event-footer .add-event-btn:hover {
            background-color: transparent;
            color: var(--primary-clr);
        }

        .workouts-list {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
            position: absolute;
            width: 100%;
            z-index: 1000;
            border: 1px solid var(--primary-clr);
        }

        .workouts-list.active {
            display: block;
        }

        .workouts-container {
            min-height: 300px;
            position: relative;
        }

        .workout-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            margin: 10px 0;
            background: linear-gradient(145deg, #ffffff, #f9f9f9);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .workout-item.hidden {
            display: none;
        }

        .workout-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px var(--shadow-clr);
            border: 2px solid var(--primary-clr);
        }

        .workout-item.selected {
            background: linear-gradient(145deg, #f7f2ff, #f0eaff);
            border: 2px solid var(--primary-clr);
            box-shadow: 0 8px 25px var(--shadow-clr);
        }

        .workout-image {
            width: 100%;
            max-width: 250px;
            height: 150px;
            overflow: hidden;
            border-radius: 12px;
            margin-bottom: 15px;
            position: relative;
            background: #000;
        }

        .workout-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: all 0.3s ease;
            opacity: 0.9;
        }

        .workout-item:hover .workout-img {
            transform: scale(1.05);
            opacity: 1;
        }

        .workout-overlay {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-clr);
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .workout-item:hover .workout-overlay {
            background: var(--primary-clr);
            color: #fff;
            transform: scale(1.1);
        }

        .workout-details {
            text-align: center;
            width: 100%;
        }

        .workout-name {
            font-weight: 700;
            color: #373c4f;
            font-size: 1.3rem;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .workout-exercise-count {
            font-size: 1rem;
            color: #666;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .workout-stats {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 12px;
            flex-wrap: wrap;
        }

        .workout-stats span {
            display: flex;
            align-items: center;
            gap: 5px;
            color: #555;
            font-size: 0.9rem;
            background: #f5f5f5;
            padding: 4px 10px;
            border-radius: 15px;
            transition: all 0.3s ease;
        }

        .workout-stats span i {
            color: var(--primary-clr);
        }

        .workout-item:hover .workout-stats span {
            background: var(--primary-clr);
            color: #fff;
        }

        .workout-item:hover .workout-stats span i {
            color: #fff;
        }

        .details-btn {
            display: inline-block;
            padding: 10px 25px;
            background: var(--primary-clr);
            color: #fff;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-decoration: none;
        }

        .details-btn:hover {
            background: transparent;
            color: var(--primary-clr);
            border: 2px solid var(--primary-clr);
            transform: translateY(-2px);
        }

        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            padding: 0 10px;
        }

        .prev-page-btn, .next-page-btn {
            padding: 10px 20px;
            background: var(--primary-clr);
            color: #fff;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 4px 15px var(--shadow-clr);
        }

        .prev-page-btn:hover, .next-page-btn:hover {
            background: var(--hover-clr);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px var(--shadow-clr);
        }

        .prev-page-btn.disabled, .next-page-btn.disabled {
            background-color: #ccc;
            cursor: not-allowed;
            box-shadow: none;
        }

        .page-info {
            font-size: 1rem;
            color: #373c4f;
            font-weight: 600;
        }

        @@media screen and (max-width: 1000px) {
            body {
                align-items: flex-start;
                justify-content: flex-start;
            }

            .container {
                min-height: 100vh;
                flex-direction: column;
                border-radius: 0;
            }

            .container .left {
                width: 100%;
                height: 100%;
                padding: 20px 0;
            }

            .container .right {
                width: 100%;
                height: 100%;
                padding: 20px 0;
            }

            .calendar::before,
            .calendar::after {
                top: 100%;
                left: 50%;
                width: 97%;
                height: 12px;
                border-radius: 0 0 5px 5px;
                transform: translateX(-50%);
            }

            .calendar::before {
                width: 94%;
                top: calc(100% + 12px);
            }

            .events {
                padding-bottom: 340px;
            }

            .add-event-wrapper {
                bottom: 100px;
            }
        }

        @@media screen and (max-width: 768px) {
            .user-profile {
                padding: 15px;
            }

            .profile-picture {
                width: 80px;
                height: 80px;
            }

            .user-name {
                font-size: 1rem;
            }

            .user-email {
                font-size: 0.9rem;
            }

            .workout-image {
                max-width: 200px;
                height: 120px;
            }
        }

        @@media screen and (max-width: 500px) {
            .calendar .month {
                height: 75px;
            }

            .calendar .weekdays {
                height: 50px;
            }

            .calendar .days .day {
                height: 40px;
                font-size: 0.8rem;
            }

            .calendar .days .day.active,
            .calendar .days .day.today {
                font-size: 1rem;
            }

            .right .today-date {
                padding: 20px;
            }

            .workout-image {
                max-width: 150px;
                height: 100px;
            }

            .pagination {
                flex-direction: column;
                gap: 10px;
            }

            .prev-page-btn, .next-page-btn {
                width: 100%;
                justify-content: center;
            }

            .attach-workout-btn {
                width: 150px;
                font-size: 0.9rem;
            }
        }
    </style>

    <script>
        const calendar = document.querySelector(".calendar"),
            date = document.querySelector(".date"),
            daysContainer = document.querySelector(".days"),
            prev = document.querySelector(".prev"),
            next = document.querySelector(".next"),
            todayBtn = document.querySelector(".today-btn"),
            gotoBtn = document.querySelector(".goto-btn"),
            dateInput = document.querySelector(".date-input"),
            eventDay = document.querySelector(".event-day"),
            eventDate = document.querySelector(".event-date"),
            workoutsSection = document.querySelector(".workouts-section"),
            mealsSection = document.querySelector(".meals-section"),
            addEventBtn = document.querySelector(".add-event"),
            addEventWrapper = document.querySelector(".add-event-wrapper"),
            addEventCloseBtn = document.querySelector(".close"),
            addEventTitle = document.querySelector(".event-name"),
            addEventFrom = document.querySelector(".event-time-from"),
            addEventTo = document.querySelector(".event-time-to"),
            addEventSubmit = document.querySelector(".add-event-btn"),
            attachWorkoutBtn = document.querySelector(".attach-workout-btn"),
            workoutsList = document.querySelector(".workouts-list"),
            workoutsContainer = document.querySelector(".workouts-container"),
            prevPageBtn = document.querySelector(".prev-page-btn"),
            nextPageBtn = document.querySelector(".next-page-btn"),
            pageInfo = document.querySelector(".page-info"),
            selectedWorkoutInfo = document.querySelector(".selected-workout-info");

        const calendarId = @Model.CalendarId;
        const userId = '@Model.UserId';
        let today = new Date();
        let activeDay;
        let month = today.getMonth();
        let year = today.getFullYear();
        let selectedWorkoutId = null;

        const months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        const eventsArr = [];
        const itemsPerPage = 1;
        let currentPage = 1;
        const workoutItems = document.querySelectorAll(".workout-item");
        const totalPages = Math.ceil(workoutItems.length / itemsPerPage);

        getEvents();
        initCalendar();

        function initCalendar() {
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const prevLastDay = new Date(year, month, 0);
            const prevDays = prevLastDay.getDate();
            const lastDate = lastDay.getDate();
            const day = firstDay.getDay();
            const nextDays = 7 - lastDay.getDay() - 1;

            date.innerHTML = months[month] + " " + year;

            let days = "";
            for (let x = day; x > 0; x--) {
                days += `<div class="day prev-date">${prevDays - x + 1}</div>`;
            }

            for (let i = 1; i <= lastDate; i++) {
                let hasEvent = false;
                eventsArr.forEach((eventObj) => {
                    if (
                        eventObj.day === i &&
                        eventObj.month === month + 1 &&
                        eventObj.year === year
                    ) {
                        hasEvent = true;
                    }
                });
                if (
                    i === new Date().getDate() &&
                    year === new Date().getFullYear() &&
                    month === new Date().getMonth()
                ) {
                    activeDay = i;
                    getActiveDay(i);
                    updateEvents(i);
                    days += hasEvent ? `<div class="day today active event">${i}</div>` : `<div class="day today active">${i}</div>`;
                } else {
                    days += hasEvent ? `<div class="day event">${i}</div>` : `<div class="day">${i}</div>`;
                }
            }

            for (let j = 1; j <= nextDays; j++) {
                days += `<div class="day next-date">${j}</div>`;
            }
            daysContainer.innerHTML = days;
            addListner();
        }

        function prevMonth() {
            month--;
            if (month < 0) { month = 11; year--; }
            initCalendar();
        }

        function nextMonth() {
            month++;
            if (month > 11) { month = 0; year++; }
            initCalendar();
        }

        prev.addEventListener("click", prevMonth);
        next.addEventListener("click", nextMonth);

        function updatePagination() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            workoutItems.forEach((item, index) => {
                item.classList.toggle("hidden", index < startIndex || index >= endIndex);
            });

            pageInfo.textContent = `Workout ${currentPage} of ${totalPages}`;
            prevPageBtn.classList.toggle("disabled", currentPage === 1);
            nextPageBtn.classList.toggle("disabled", currentPage === totalPages);
        }

        updatePagination();

        prevPageBtn.addEventListener("click", () => {
            if (currentPage > 1) { currentPage--; updatePagination(); }
        });

        nextPageBtn.addEventListener("click", () => {
            if (currentPage < totalPages) { currentPage++; updatePagination(); }
        });

        function addListner() {
            const days = document.querySelectorAll(".day");
            days.forEach((day) => {
                day.addEventListener("click", (e) => {
                    // Remove 'active' class from all days first
                    days.forEach(d => d.classList.remove("active"));
                    
                    getActiveDay(e.target.innerHTML);
                    updateEvents(Number(e.target.innerHTML));
                    activeDay = Number(e.target.innerHTML);

                    // Add 'active' class only to the clicked day
                    if (e.target.classList.contains("day")) {
                        e.target.classList.add("active");
                    }

                    if (e.target.classList.contains("prev-date")) {
                        prevMonth();
                        setTimeout(() => {
                            const newDays = document.querySelectorAll(".day");
                            newDays.forEach((d) => {
                                if (!d.classList.contains("prev-date") && d.innerHTML === e.target.innerHTML) {
                                    d.classList.add("active");
                                }
                            });
                        }, 100);
                    } else if (e.target.classList.contains("next-date")) {
                        nextMonth();
                        setTimeout(() => {
                            const newDays = document.querySelectorAll(".day");
                            newDays.forEach((d) => {
                                if (!d.classList.contains("next-date") && d.innerHTML === e.target.innerHTML) {
                                    d.classList.add("active");
                                }
                            });
                        }, 100);
                    }
                });
            });
        }

        todayBtn.addEventListener("click", () => {
            today = new Date();
            month = today.getMonth();
            year = today.getFullYear();
            initCalendar();
        });

        dateInput.addEventListener("input", (e) => {
            dateInput.value = dateInput.value.replace(/[^0-9/]/g, "");
            if (dateInput.value.length === 2) dateInput.value += "/";
            if (dateInput.value.length > 7) dateInput.value = dateInput.value.slice(0, 7);
            if (e.inputType === "deleteContentBackward" && dateInput.value.length === 3) {
                dateInput.value = dateInput.value.slice(0, 2);
            }
        });

        gotoBtn.addEventListener("click", gotoDate);

        function gotoDate() {
            const dateArr = dateInput.value.split("/");
            if (dateArr.length === 2 && dateArr[0] > 0 && dateArr[0] < 13 && dateArr[1].length === 4) {
                month = dateArr[0] - 1;
                year = dateArr[1];
                initCalendar();
                return;
            }
            alert("Invalid Date");
        }

        function getActiveDay(date) {
            const day = new Date(year, month, date);
            const dayName = day.toString().split(" ")[0];
            eventDay.innerHTML = dayName;
            eventDate.innerHTML = date + " " + months[month] + " " + year;
        }

        function updateEvents(date) {
            let workouts = "";
            let meals = "";
            let hasAnyEvent = false;
            
            eventsArr.forEach((eventObj) => {
                if (date === eventObj.day && month + 1 === eventObj.month && year === eventObj.year) {
                    hasAnyEvent = true;
                    eventObj.events.forEach((event, index) => {
                        let eventContent = '';
                        let section = '';
                        if (event.type === "workout" && event.workout) {
                            eventContent = `
                                <div class="event-workout">
                                    <img src="${event.workout.imageUrl}" alt="${event.workout.name}" />
                                    <div class="workout-details">
                                        <p class="workout-name">${event.workout.name}</p>
                                        <p class="workout-info"><i class="fas fa-dumbbell"></i> ${event.workout.muscleGroup} - ${event.workout.exerciseCount} Exercises</p>
                                    </div>
                                </div>
                            `;
                            section = 'workouts';
                        } else if (event.type === "meal" && event.meal) {
                            eventContent = `
                                <div class="event-meal">
                                    <img src="${event.meal.imageUrl}" alt="${event.meal.name}" />
                                    <div class="meal-details">
                                        <p class="meal-name">${event.meal.name}</p>
                                        <p class="meal-info"><i class="fas fa-utensils"></i> ${event.meal.calories} Calories - ${event.meal.mealCount} Items</p>
                                    </div>
                                </div>
                            `;
                            section = 'meals';
                        }

                        const eventHtml = `
                            <div class="event"
                                 data-day="${eventObj.day}"
                                 data-month="${eventObj.month}"
                                 data-year="${eventObj.year}"
                                 data-index="${index}"
                                 data-event-id="${eventObj.eventId}">
                                <div class="title">
                                    <i class="fas fa-circle"></i>
                                    <h3 class="event-title">${event.title}</h3>
                                </div>
                                <div class="event-time">
                                    <span class="event-time">${event.time}</span>
                                </div>
                                ${eventContent}
                                ${eventObj.isMine ? `
                                    <button class="delete-btn" onclick="confirmDelete(${eventObj.eventId}, '${userId}', ${eventObj.day}, ${eventObj.month}, ${eventObj.year}, ${index})">Delete</button>
                                ` : ''}
                            </div>`;

                        if (section === 'workouts') {
                            workouts += eventHtml;
                        } else if (section === 'meals') {
                            meals += eventHtml;
                        }
                    });
                }
            });

            // Update sections only if there are events of that type
            if (workouts) {
                workoutsSection.innerHTML = `<h2>Тренировки</h2>${workouts}`;
            } else {
                workoutsSection.innerHTML = '';
            }

            if (meals) {
                mealsSection.innerHTML = `<h2>Ястия</h2>${meals}`;
            } else {
                mealsSection.innerHTML = '';
            }

            // Ensure the day is marked as an event only if there are any events (workouts or meals)
            const activeDayEl = document.querySelector(".day.active");
            if (activeDayEl) {
                if (hasAnyEvent) {
                    activeDayEl.classList.add("event");
                } else {
                    activeDayEl.classList.remove("event");
                }
            }
        }

        function confirmDelete(eventId, userId, day, month, year, index) {
            if (confirm("Сигурни ли сте, че искате да изтриете това събитие?")) {
                deleteEvent(eventId, userId, day, month, year, index);
            }
        }

        async function deleteEvent(eventId, userId, day, month, year, index) {
            try {
                const formData = new FormData();
                formData.append('eventId', eventId);
                formData.append('userId', userId);

                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    formData.append('__RequestVerificationToken', token.value);
                }

                const response = await fetch('/Trainer/Calendar/Delete', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const eventObj = eventsArr.find(e =>
                        e.day === day && e.month === month && e.year === year
                    );
                    if (eventObj) {
                        eventObj.events.splice(index, 1);
                        if (eventObj.events.length === 0) {
                            const arrIndex = eventsArr.indexOf(eventObj);
                            eventsArr.splice(arrIndex, 1);
                        }
                        updateEvents(activeDay);
                        const activeDayEl = document.querySelector(".day.active");
                        if (activeDayEl && eventsArr.every(e => e.day !== day || e.month !== month || e.year !== year)) {
                            activeDayEl.classList.remove("event");
                        }
                    }
                } else {
                    alert("Failed to delete event. Please try again.");
                }
            } catch (error) {
                console.error("Error deleting event:", error);
                alert("An error occurred while deleting the event.");
            }
        }

        addEventBtn.addEventListener("click", () => {
            addEventWrapper.classList.toggle("active");
            if (!addEventWrapper.classList.contains("active")) {
                workoutsList.classList.remove("active");
            }
        });

        addEventCloseBtn.addEventListener("click", () => {
            addEventWrapper.classList.remove("active");
            workoutsList.classList.remove("active");
        });

        document.addEventListener("click", (e) => {
            if (e.target !== addEventBtn &&
                e.target !== attachWorkoutBtn &&
                !addEventWrapper.contains(e.target) &&
                !workoutsList.contains(e.target)) {
                addEventWrapper.classList.remove("active");
                workoutsList.classList.remove("active");
            }
        });

        addEventTitle.addEventListener("input", (e) => {
            addEventTitle.value = addEventTitle.value.slice(0, 60);
        });

        addEventFrom.addEventListener("input", (e) => {
            addEventFrom.value = addEventFrom.value.replace(/[^0-9:]/g, "");
            if (addEventFrom.value.length === 2) addEventFrom.value += ":";
            if (addEventFrom.value.length > 5) addEventFrom.value = addEventFrom.value.slice(0, 5);
        });

        addEventTo.addEventListener("input", (e) => {
            addEventTo.value = addEventTo.value.replace(/[^0-9:]/g, "");
            if (addEventTo.value.length === 2) addEventTo.value += ":";
            if (addEventTo.value.length > 5) addEventTo.value = addEventTo.value.slice(0, 5);
        });

        attachWorkoutBtn.addEventListener("click", (e) => {
            e.preventDefault();
            workoutsList.classList.toggle("active");
            addEventWrapper.classList.add("active");
        });

        workoutItems.forEach(workout => {
            workout.addEventListener("click", (e) => {
                e.stopPropagation();
                if (e.target.classList.contains("details-btn")) return;

                workoutItems.forEach(w => w.classList.remove("selected"));
                workout.classList.add("selected");
                selectedWorkoutId = parseInt(workout.dataset.workoutId) || null;

                const workoutName = workout.dataset.workoutName;
                selectedWorkoutInfo.textContent = `Selected: ${workoutName}`;

                setTimeout(() => {
                    workoutsList.classList.remove("active");
                }, 300);
            });
        });

        addEventSubmit.addEventListener("click", async () => {
            const eventTitle = addEventTitle.value.trim();
            const eventTimeFrom = addEventFrom.value.trim();
            const eventTimeTo = addEventTo.value.trim();

            if (!eventTitle || !eventTimeFrom || !eventTimeTo) {
                alert("Please fill all the fields");
                return;
            }

            const timeFromArr = eventTimeFrom.split(":");
            const timeToArr = eventTimeTo.split(":");
            if (
                timeFromArr.length !== 2 ||
                timeToArr.length !== 2 ||
                isNaN(timeFromArr[0]) || isNaN(timeFromArr[1]) ||
                isNaN(timeToArr[0]) || isNaN(timeToArr[1]) ||
                timeFromArr[0] > 23 || timeFromArr[1] > 59 ||
                timeToArr[0] > 23 || timeToArr[1] > 59
            ) {
                alert("Invalid Time Format (use HH:MM, 24-hour)");
                return;
            }

            if (!activeDay) {
                alert("Please select a day in the calendar");
                return;
            }

            const eventData = {
                calendarId: calendarId,
                workoutId: selectedWorkoutId,
                title: eventTitle,
                startTime: eventTimeFrom,
                endTime: eventTimeTo,
                day: activeDay,
                month: month + 1,
                year: year
            };

            console.log("Sending event data:", eventData);

            try {
                const response = await fetch('/Trainer/Calendar/AddEvent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(eventData)
                });

                const result = await response.json();

                if (result.success) {
                    const timeFrom = convertTime(eventTimeFrom);
                    const timeTo = convertTime(eventTimeTo);

                    let workoutDetails = null;
                    if (selectedWorkoutId) {
                        const selectedWorkout = Array.from(workoutItems).find(w =>
                            parseInt(w.dataset.workoutId) === selectedWorkoutId);
                        workoutDetails = {
                            id: selectedWorkoutId,
                            name: selectedWorkout.dataset.workoutName,
                            imageUrl: selectedWorkout.dataset.workoutImage,
                            exerciseCount: selectedWorkout.dataset.workoutExercises,
                            muscleGroup: selectedWorkout.dataset.workoutMuscle
                        };
                    }

                    const newEvent = {
                        title: eventTitle,
                        time: `${timeFrom} - ${timeTo}`,
                        type: selectedWorkoutId ? "workout" : "meal", // Assuming meal if no workoutId
                        [selectedWorkoutId ? "workout" : "meal"]: workoutDetails
                    };

                    let eventAdded = false;
                    eventsArr.forEach((item) => {
                        if (
                            item.day === activeDay &&
                            item.month === month + 1 &&
                            item.year === year
                        ) {
                            item.events.push(newEvent);
                            item.eventId = result.eventId;
                            eventAdded = true;
                        }
                    });

                    if (!eventAdded) {
                        eventsArr.push({
                            day: activeDay,
                            month: month + 1,
                            year: year,
                            eventId: result.eventId,
                            events: [newEvent],
                            isMine: true // Assuming new events are mine
                        });
                    }

                    // Update the calendar and events immediately
                    updateEvents(activeDay);
                    const activeDayEl = document.querySelector(".day.active");
                    if (!activeDayEl.classList.contains("event")) {
                        activeDayEl.classList.add("event");
                    }

                    addEventWrapper.classList.remove("active");
                    workoutsList.classList.remove("active");
                    addEventTitle.value = "";
                    addEventFrom.value = "";
                    addEventTo.value = "";
                    selectedWorkoutInfo.textContent = "";
                    workoutItems.forEach(w => w.classList.remove("selected"));
                    selectedWorkoutId = null;

                    alert("Event added successfully!");
                } else {
                    alert(result.message || "Failed to add event");
                }
            } catch (error) {
                console.error("Error adding event:", error);
                alert("Error adding event: " + error.message);
            }
        });

        function getEvents() {
            const serverWorkoutEvents = @Html.Raw(Json.Serialize(Model.Workouts.Select(w => new
            {
                day = w.Date.Day,
                month = w.Date.Month,
                year = w.Date.Year,
                eventId = w.EventId,
                isMine = w.IsMine,
                events = new[] {
                    new {
                        type = "workout",
                        title = w.Name,
                        time = (w.StartEventTime != null && w.EndEventTime != null)
                            ? $"{w.StartEventTime:hh\\:mm} - {w.EndEventTime:hh\\:mm}"
                            : "Time not set",
                        workout = new {
                            id = w.Id,
                            name = w.Name,
                            imageUrl = w.ImageUrl,
                            exerciseCount = w.ExerciseCount,
                            muscleGroup = w.MuscleGroup
                        }
                    }
                }
            })));

            const serverMealEvents = @Html.Raw(Json.Serialize(Model.Meals.Select(m => new
            {
                day = m.Date.Day,
                month = m.Date.Month,
                year = m.Date.Year,
                eventId = m.EventId,
                isMine = m.IsMine,
                events = new[] {
                    new {
                        type = "meal",
                        title = m.Name,
                        time = (m.StartEventTime != null && m.EndEventTime != null)
                            ? $"{m.StartEventTime:hh\\:mm} - {m.EndEventTime:hh\\:mm}"
                            : m.MealTime ?? "Time not set",
                        meal = new {
                            id = m.Id,
                            name = m.Name,
                            imageUrl = m.ImageUrl,
                            calories = m.Calories,
                            mealCount = m.MealCount
                        }
                    }
                }
            })));

            eventsArr.length = 0;
            eventsArr.push(...serverWorkoutEvents, ...serverMealEvents);
        }

        function convertTime(time) {
            let timeArr = time.split(":");
            let timeHour = parseInt(timeArr[0]);
            let timeMin = timeArr[1];
            let timeFormat = timeHour >= 12 ? "PM" : "AM";
            timeHour = timeHour % 12 || 12;
            return timeHour + ":" + timeMin + " " + timeFormat;
        }
    </script>
</body>
</html>
@using AIFitnessProject.Core.Models.Account
@model IEnumerable<AllUsersViewModel>
<style>
    :root {
        --training-color: #8A2BE2;
        --calendar-color: #dc3545;
        --background: #f8f9fa;
        --primary-color: #007bff;
        --secondary-color: #6c757d;
    }

    body {
        background: var(--background);
        min-height: 100vh;
        margin: 0;
        font-family: 'Arial', sans-serif;
    }

    .user-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(450px, 1fr)); /* Увеличаваме ширината */
        gap: 2rem;
        padding: 2rem;
    }

    .user-card {
        background: linear-gradient(135deg, #ffffff, #eaf2ff); /* Градиентен фон */
        border-radius: 20px;
        padding: 3rem; /* По-голям padding */
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        margin: 1rem;
        transform-style: preserve-3d;
        min-height: 400px; /* Увеличена височина */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        animation: fadeIn 0.8s ease forwards;
    }

        .user-card:hover {
            transform: translateY(-15px) rotateX(5deg) rotateY(5deg); /* 3D ефект */
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
        }

    .profile-section {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }

    .profile-picture {
        width: 120px; /* По-голяма снимка */
        height: 120px;
        border-radius: 50%;
        margin-right: 1.5rem;
        border: 4px solid #e9ecef;
        object-fit: cover;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    }

    .user-info h3 {
        margin: 0;
        color: #2d3436;
        font-size: 1.8rem;
        font-weight: bold;
    }

    .user-info p {
        margin: 0.25rem 0;
        color: #636e72;
        font-size: 1.1rem;
    }

    .experience-badge {
        display: block;
        padding: 1.2rem;
        font-size: 1.4rem;
        background: #ffe8cc;
        color: #d9480f;
        border-radius: 12px;
        text-align: center;
        width: 100%;
        cursor: pointer;
        transition: background 0.3s, color 0.3s;
    }

        .experience-badge:hover {
            background: #ffd1a7;
            color: #b73e0d;
        }

        .experience-badge.expanded {
            white-space: normal;
            overflow: visible;
        }

        .experience-badge::after {
            content: "▼";
            margin-left: 0.5rem;
            font-size: 0.9rem;
            transition: transform 0.3s;
        }

        .experience-badge.expanded::after {
            transform: rotate(180deg);
        }

    /* Custom Button Styles */
    .button {
        --width: 160px;
        --height: 50px;
        --tooltip-height: 40px;
        --tooltip-width: 140px;
        --gap-between-tooltip-to-button: 20px;
        width: var(--width);
        height: var(--height);
        background: var(--button-color);
        position: relative;
        border-radius: 0.6em;
        font-family: "Arial";
        transition: all 0.3s;
        border: none;
        cursor: pointer;
        overflow: hidden;
    }

        .button[data-tooltip]::before {
            content: attr(data-tooltip);
            position: absolute;
            bottom: calc(100% + var(--gap-between-tooltip-to-button));
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--tooltip-color);
            color: white;
            padding: 0.5em 1em;
            border-radius: 0.4em;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s, transform 0.3s;
        }

        .button[data-tooltip]:hover::before {
            opacity: 1;
            transform: translateX(-50%) translateY(-10px);
        }

    .training-btn {
        --button-color: #8A2BE2;
        --tooltip-color: #8A2BE2;
    }

    .calendar-btn {
        --button-color: #dc3545;
        --tooltip-color: #dc3545;
    }

    .button-wrapper {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
    }

    .button-text, .button-icon {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: top 0.5s;
        color: white;
    }

    .button-text {
        top: 0;
        gap: 0.5rem;
    }

    .button-icon {
        top: 100%;
    }

    .button:hover .button-text {
        top: -100%;
    }

    .button:hover .button-icon {
        top: 0;
    }

    .button-icon svg {
        width: 30px;
        height: 30px;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="user-grid">
    @foreach (var user in Model)
    {
        <div class="user-card">
            <div class="profile-section">
                @if (user.ProfilePicture.StartsWith("http") || user.ProfilePicture.StartsWith("/img"))
                {
                    <img src="@user.ProfilePicture" class="profile-picture" alt="Profile">
                }
                else
                {
                    <img src="data:image/jpeg;base64,@user.ProfilePicture" class="profile-picture" alt="Profile">
                }
                <div class="user-info">
                    <h3>@user.FirsName @user.LastName</h3>
                    <p>@user.Email</p>
                    <div class="experience-badge" onclick="this.classList.toggle('expanded')">
                        @user.ExperienceLevel
                    </div>
                </div>
            </div>
            <p style="color: #6c757d; margin: 1.5rem 0; font-size: 1.2rem;">@user.Aim</p>
            <div class="buttons-container" style="display: flex; gap: 1.5rem;">

                <button class="button training-btn" data-tooltip="Тренировъчна програма">
                    <div class="button-wrapper">
                        <div class="button-text">
                            <span>Тренировки</span>
                        </div>
                        <div class="button-icon">
                            <svg viewBox="0 0 24 24" fill="white">
                                <path d="M15.5,13H18V11H15.5C14.67,11 14,11.67 14,12.5S14.67,14 15.5,14H18V16H15.5C14.67,16 14,15.33 14,14.5S14.67,13 15.5,13M19,19H5V5H19M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z" />
                            </svg>
                        </div>
                    </div>
                </button>
                <!-- Calendar Button -->
                <form asp-controller="Calendar" asp-action="UserCalendar" asp-area="Dietitian" asp-route-id="@user.UserId" method="get">
                    <button type="submit" class="button calendar-btn" data-tooltip="Календар на тренировки">
                        <div class="button-wrapper">
                            <div class="button-text">
                                <span>Календар</span>
                            </div>
                            <div class="button-icon">
                                <svg viewBox="0 0 24 24" fill="white">
                                    <path d="M19 4h-1V2h-2v2H8V2H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V10h14v10z" />
                                </svg>
                            </div>
                        </div>
                    </button>
                </form>
            </div>
        </div>
    }
</div>

<script>
    // Experience level expand functionality
    document.querySelectorAll('.experience-badge').forEach(badge => {
        badge.addEventListener('click', function () {
            this.classList.toggle('expanded');
        });
    });

    // Tooltip hover effect
    document.querySelectorAll('.button').forEach(button => {
        button.addEventListener('mousemove', function (e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            this.style.setProperty('--mouse-x', `${x}px`);
            this.style.setProperty('--mouse-y', `${y}px`);
        });
    });
</script>